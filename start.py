import telebot
import config
import random
from random import shuffle
import pymongo
from pymongo import MongoClient
import pprint
from telebot import types
import requests
from grab import Grab

import os
from flask import Flask, request

bot = telebot.TeleBot(config.TOKEN)
server = Flask(__name__)

# client = MongoClient('localhost', 27017)
client = MongoClient(config.DB_CLIENT)
db = client['english_trainspoting']
usersCollection = db['users']
videoCollection = db['video_to_listen']
phraseCollection = db['make_phrase']

# pprint.pprint(list(collection.find({"year": "2019"})))

URL_AUTH = 'https://developers.lingvolive.com/api/v1.1/authenticate'
URL_TRANSLATE = 'https://developers.lingvolive.com/api/v1/Minicard'


# URL_TRANSLATE = 'https://developers.lingvolive.com/api/v1/Translation'


@bot.message_handler(commands=['filltheform'])
def formFilling(message):
    print(message)
    g = Grab()
    g.go('http://atthelesson.h1n.ru/health/index.php')
    # print(g.doc.body)
    g.doc.choose_form(name="dataInput")

    g.doc.set_input_by_id("studentId", "1657181")
    g.doc.set_input_by_id("lastname", "–†–æ–∂–∫–æ–≤")
    g.doc.set_input_by_id("customRadio1", "–ó–¥–æ—Ä–æ–≤")
    g.doc.set_input_by_id("customRadio3", "–í –†–û")
    # g.doc.set_input_by_id("customRadio3", "–ü–æ–∫–∏–Ω—É–ª –†–û")

    g.submit()
    msg = g.doc.text_search(u'–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã')
    bot.send_message(message.chat.id, msg)
    # print(g.doc.text_assert(u'–û—à–∏–±–∫–∞'))


def addNewUserToDB(message):
    usersCollection.insert_one(
        {
            "id": str(message.from_user.id),
            "username": message.from_user.first_name,
            "current_video_id": 0,
            "video_listen_right_answers": 0
        }
    )
    new_user = username_db = usersCollection.find_one({"id": str(message.from_user.id)})
    print(new_user)


@bot.message_handler(commands=['start'])
def welcome(message):
    print(message)
    print(ord("‚ù∂"))
    print(chr(10105))
    print(ord("–∞"))
    pprint.pprint(os.environ.keys())

    userDataDB = usersCollection.find_one({"id": str(message.from_user.id)})
    username_from_message = message.from_user.first_name

    if userDataDB:
        msg = "–ò —Å–Ω–æ–≤–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, " + str(username_from_message)
    else:
        addNewUserToDB(message)
        msg = "–†–∞–¥ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, " + str(username_from_message) + \
              "–Ø - <b>{0.first_name}</b>, –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ–º–æ—á—å —Ä–∞–∑–≤–∏—Ç—å –í–∞—à –Ω–∞–≤—ã–∫ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ " \
              "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç —Å –∫–≤–∞–¥—Ä–∞—Ç–∏–∫–∞–º–∏) –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è. " \

    bot.send_message(message.chat.id, msg.format(bot.get_me()), parse_mode='html')


def mainMenuInit(message):
    # keyboard
    main_screen_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)

    # item1 = types.KeyboardButton("üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ")
    item2 = types.KeyboardButton("üòä –ö–∞–∫ –¥–µ–ª–∞?")
    videoListening = types.KeyboardButton("–û —á–µ–º –æ–Ω–∏ –≥–æ–≤–æ—Ä—è—Ç? ü§î")
    # main_screen_markup.row("üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ", "üòä –ö–∞–∫ –¥–µ–ª–∞?")
    main_screen_markup.add("üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ", "üòä –ö–∞–∫ –¥–µ–ª–∞?", "–û —á–µ–º –æ–Ω–∏ –≥–æ–≤–æ—Ä—è—Ç? ü§î",
                           "–°–æ—Å—Ç–∞–≤—å ______ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º")

    bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è", parse_mode='html', reply_markup=main_screen_markup)


@bot.message_handler(content_types=['text', 'video'])
def mainScreenResponse(message):
    print(message)
    print(str(message.from_user.first_name) + " " + str(message.from_user.last_name) + ": " + str(message.text))
    global videoRightAnswer, userCountryAccent, phraseBlankMessage, userPhraseItemChoice, makePhraseInlineMarkup
    if message.chat.type == 'private':
        if message.text == 'üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ':
            bot.send_message(message.chat.id, str(random.randint(0, 100)))
        elif message.text == 'üòä –ö–∞–∫ –¥–µ–ª–∞?':

            inline_markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("–•–æ—Ä–æ—à–æ", callback_data='good')
            item2 = types.InlineKeyboardButton("–ù–µ –æ—á–µ–Ω—å", callback_data='bad')
            inline_markup.add(item1, item2)
            bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, —Å–∞–º –∫–∞–∫?', reply_markup=inline_markup)

        elif message.text == "–ù–∞ –≥–ª–∞–≤–Ω—É—é üè†":
            mainMenuInit(message)

        elif message.text == "–°–æ—Å—Ç–∞–≤—å ______ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º" or message.text == "–ï—â–µ —Ñ—Ä–∞–∑! üìù":
            makePhrase(message)

        elif message.text == "–û —á–µ–º –æ–Ω–∏ –≥–æ–≤–æ—Ä—è—Ç? ü§î":
            countryAccentMarkup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
            countryAccentMarkup.row("–ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–π üá¨üáß", "–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π üá∫üá∏")
            bot.send_message(message.chat.id, "–° –∫–∞–∫–∏–º –∞–∫—Ü–µ–Ω—Ç–æ–º –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥—Ä—É–∂–∏—Ç—å—Å—è?",
                             reply_markup=countryAccentMarkup)
            videoRightAnswer = ""

        elif (message.text == "–ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–π üá¨üáß") or (message.text == "–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π üá∫üá∏") or (
                message.text == "–ï—â–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤! ü§ê"):

            if message.text == "–ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–π üá¨üáß":
                userCountryAccent = "British"
            elif message.text == "–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π üá∫üá∏":
                userCountryAccent = "American"

            videoRightAnswer = videoListening(message, userCountryAccent)
            print("–æ —á–µ–º " + videoRightAnswer)

        elif ord(message.text[0]) in [10102, 10103, 10104, 10105]:
            print("–ø—Ä–æ–≤–µ—Ä–∫–∞ " + videoRightAnswer)

            if videoRightAnswer == message.text:
                bot.send_message(message.chat.id, "–ò —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!")
            else:
                bot.send_message(message.chat.id, "–£–≤—ã, –Ω–µ—Ç. –ü–æ—Å–ª—É—à–∞–π –µ—â–µ —Ä–∞–∑.")

        else:
            msg = getWordTranslation(message.text)
            bot.send_message(message.chat.id, msg)


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            if call.data == 'good':
                bot.send_message(call.message.chat.id, '–í–æ—Ç –∏ –æ—Ç–ª–∏—á–Ω–µ–Ω—å–∫–æ üòä')
            elif call.data == 'bad':
                bot.send_message(call.message.chat.id, '–ë—ã–≤–∞–µ—Ç üò¢')

            elif call.data[0:11] == "phrase_word":
                global phraseBlankMessage, phraseEditedMessage, makePhraseInlineMarkup, phraseAnswer
                userPhraseChoice = call.data[12:]
                if userPhraseChoice == "‚úÖ":
                    print("Confirm" + str(userPhraseChoice))
                    print(phraseEditedMessage)
                    print(phraseAnswer)
                    userPhraseChoice = ""
                    if str(phraseEditedMessage) == str(phraseAnswer):
                        msg = "–î–∞, –≤—ã –∞–±—Å–æ–ª—é—Ç–Ω–æ –ø—Ä–∞–≤—ã!"
                    else:
                        msg = "–£–≤—ã, –Ω–æ –Ω–µ—Ç. –ü–æ–¥—É–º–∞–π—Ç–µ —Ö–æ—Ä–æ—à–µ–Ω—å–∫–æ"

                    bot.send_message(chat_id=call.message.chat.id,
                                     text=msg)

                elif userPhraseChoice == "‚ùå":
                    print("Clear")
                    phraseEditedMessage = phraseBlankMessage
                    bot.edit_message_text(chat_id=call.message.chat.id,
                                          message_id=call.message.message_id,
                                          text=phraseEditedMessage,
                                          reply_markup=makePhraseInlineMarkup)
                else:
                    print("userPhraseChoice: "+ str(userPhraseChoice))
                    phraseEditedMessage = phraseEditedMessage.replace("___", userPhraseChoice, 1)
                    print(phraseEditedMessage)
                    # print(bot.chosen_inline_handlers)
                    bot.edit_message_text(chat_id=call.message.chat.id,
                                          message_id=call.message.message_id,
                                          text=phraseEditedMessage,
                                          reply_markup=makePhraseInlineMarkup)

                # show alert
                # bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
                #                           text="–≠–¢–û –¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï!!11")

    except Exception as e:
        print(repr(e))


# @bot.chosen_inline_handler(func=lambda userPhraseItemChoice: True)
# def chosenPhraseItem(userPhraseItemChoice):
#     print(userPhraseItemChoice)


def makePhrase(message):
    global phraseBlankMessage, makePhraseInlineMarkup, phraseEditedMessage, phraseAnswer

    phraseCounts = phraseCollection.estimated_document_count()
    print("Phrase counts " + str(phraseCounts))
    randomPhraseId = random.randint(1, phraseCounts)

    phraseDataDB = phraseCollection.find_one({"id": str(randomPhraseId)})
    phraseQuestion = phraseDataDB.get("question_sentence")
    print(phraseQuestion)
    phraseAnswer = phraseDataDB.get("answer_sentence")
    print(phraseAnswer)
    answersMass = phraseAnswer.split()
    shuffle(answersMass)
    print(answersMass)

    makePhraseInlineMarkup = types.InlineKeyboardMarkup()
    phraseBlankMessage = ""
    callbackData = "phrase_word:"
    for elem in answersMass:
        userPhraseItemChoice = types.InlineKeyboardButton(elem, callback_data=callbackData + elem)
        makePhraseInlineMarkup.add(userPhraseItemChoice)
        phraseBlankMessage += "___ "

    makePhraseInlineMarkup.row(types.InlineKeyboardButton("‚úÖ", callback_data=callbackData + "‚úÖ"),
                               types.InlineKeyboardButton("‚ùå", callback_data=callbackData + "‚ùå"))
    phraseEditedMessage = phraseBlankMessage

    makePhraseMarkup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    makePhraseMarkup.add("–ï—â–µ —Ñ—Ä–∞–∑! üìù", "–ù–∞ –≥–ª–∞–≤–Ω—É—é üè†")

    bot.send_message(message.chat.id, phraseQuestion, reply_markup=makePhraseMarkup)
    bot.send_message(message.chat.id, phraseBlankMessage, reply_markup=makePhraseInlineMarkup)


def videoListening(message, userCountryAccent):
    # bot.send_video(message.chat.id, "./videoClips/pulpFiction.mp4", timeout=50)
    # –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Ç–µ–ª–µ–≥—Ä–∞–º
    # f = open('videoClips/pulpFictionProject.mp4', 'rb')
    # msg = bot.send_video(message.chat.id, f, timeout=100)
    # bot.send_message(message.chat.id, msg.video.file_id, reply_to_message_id=msg.message_id)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    videoCounts = videoCollection.count_documents(filter={"country_accent": str(userCountryAccent)})
    print("Video counts " + str(videoCounts))
    randomVideoId = random.randint(1, videoCounts)

    print(userCountryAccent)
    videoDataDB = videoCollection.find_one({"id": str(randomVideoId), "country_accent": str(userCountryAccent)})
    videoFileId = videoDataDB.get("file_id")
    print(videoDataDB)
    videoAnswers = videoDataDB.get("answers")
    shuffle(videoAnswers)
    rightAnswer = videoDataDB.get("right_answer")
    # print(rightAnswer)
    # print(videoAnswers)
    videoListenMarkup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    # videoListenInlineMarkup = types.InlineKeyboardMarkup

    for i in range(0, 4):
        videoItem = types.KeyboardButton(chr(10102 + i) + " " + videoAnswers[i])
        if videoAnswers[i] == rightAnswer:
            rightAnswer = chr(10102 + i) + " " + rightAnswer
        videoListenMarkup.add(videoItem)

    video = types.Video(videoFileId, 1280, 720, duration=60)
    videoListenMarkup.add("–ï—â–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤! ü§ê", "–ù–∞ –≥–ª–∞–≤–Ω—É—é üè†")

    bot.send_video(message.chat.id, video.file_id, reply_markup=videoListenMarkup)

    userAnswer = bot.send_chat_action(message.chat.id, "typing")

    return rightAnswer


def getWordTranslation(key: str) -> str:
    headers_auth = {'Authorization': 'Basic ' + config.ABBYY_KEY}
    auth = requests.post(URL_AUTH, headers=headers_auth)
    if auth.status_code == 200:
        token = auth.text
        headers_translate = {
            'Authorization': 'Bearer ' + token
        }
        # for i in range(1040, 1105):
        #     print(str(i) + ": " + chr(i))
        if ord(key[0]) in range(65, 91) or ord(key[0]) in range(97, 123):
            params = {
                'text': key,
                'srcLang': 1033,
                'dstLang': 1049,
                'isCaseSensitive': True,
            }
        elif ord(key[0]) in range(1040, 1104):
            params = {
                'text': key,
                'srcLang': 1049,
                'dstLang': 1033,
                'isCaseSensitive': True,
            }
        else:
            errMsg = "–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ —è –∑–Ω–∞—é –ø–µ—Ä–µ–≤–æ–¥ —Ç–æ–ª—å–∫–æ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏ –æ–±—Ä–∞—Ç–Ω–æ"
            return errMsg
        req = requests.get(
            URL_TRANSLATE, headers=headers_translate, params=params)
        res = req.json()
        try:
            value = res['Translation']['Translation']
            return value
        except TypeError:
            if res == 'Incoming request rate exceeded for 50000 chars per day pricing tier':
                return res
            else:
                return None
    else:
        print('Error!' + str(auth.status_code))


if "HEROKU" in list(os.environ.keys()):
    # –î–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    @server.route('/' + config.TOKEN, methods=['POST'])
    def getMessage():
        bot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode("utf-8"))])
        return "!", 200


    @server.route("/")
    def webhook():
        bot.remove_webhook()
        bot.set_webhook(url='https://englishtrainspoting.herokuapp.com/' + config.TOKEN)
        return "!", 200


    if __name__ == "__main__":
        server.run(host="0.0.0.0", port=int(os.environ.get('PORT', 5000)))
else:
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    bot.remove_webhook()
    bot.polling(none_stop=True)
