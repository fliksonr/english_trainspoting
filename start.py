import telebot
import config
import random
from random import shuffle
import pymongo
from pymongo import MongoClient
import pprint
from telebot import types
import requests
from grab import Grab

import os
from flask import Flask, request

bot = telebot.TeleBot(config.TOKEN)
server = Flask(__name__)

# client = MongoClient('localhost', 27017)
client = MongoClient(config.DB_CLIENT, retryWrites=False)
db = client['english_trainspoting']
# db = client['heroku_jq9wgddb']

usersCollection = db['users']
videoCollection = db['video_to_listen']
phraseCollection = db['make_phrase']

# pprint.pprint(list(collection.find({"year": "2019"})))

URL_AUTH = 'https://developers.lingvolive.com/api/v1.1/authenticate'
URL_TRANSLATE = 'https://developers.lingvolive.com/api/v1/Minicard'


# URL_TRANSLATE = 'https://developers.lingvolive.com/api/v1/Translation'


@bot.message_handler(commands=['filltheform'])
def formFilling(message):
    print(message)
    g = Grab()
    g.go('http://atthelesson.h1n.ru/health/index.php')
    # print(g.doc.body)
    g.doc.choose_form(name="dataInput")

    g.doc.set_input_by_id("studentId", "1657181")
    g.doc.set_input_by_id("lastname", "–†–æ–∂–∫–æ–≤")
    g.doc.set_input_by_id("customRadio1", "–ó–¥–æ—Ä–æ–≤")
    g.doc.set_input_by_id("customRadio3", "–í –†–û")
    # g.doc.set_input_by_id("customRadio3", "–ü–æ–∫–∏–Ω—É–ª –†–û")

    g.submit()
    msg = g.doc.text_search(u'–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã')
    bot.send_message(message.chat.id, msg)
    # print(g.doc.text_assert(u'–û—à–∏–±–∫–∞'))


def addNewUserToDB(message):
    usersCollection.insert_one(
        {
            "id": str(message.from_user.id),
            "username": message.from_user.first_name,
            "role": "user",
            "current_britain_video_id": 1,
            "current_american_video_id": 1,
            "current_make_phrase_id": 1,
        }
    )
    new_user = username_db = usersCollection.find_one({"id": str(message.from_user.id)})
    print(new_user)


@bot.message_handler(commands=['start'])
def welcome(message):
    print(message)
    print(ord("‚ù∂"))
    print(chr(10105))
    print(ord("–∞"))
    pprint.pprint(os.environ.keys())
    global userDataDB, newVideoTaskFlag, newPhraseTaskFlag
    newVideoTaskFlag = False
    newPhraseTaskFlag = False
    userDataDB = usersCollection.find_one({"id": str(message.from_user.id)})

    username_from_message = message.from_user.first_name

    if userDataDB:
        msg = "–ò —Å–Ω–æ–≤–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, " + str(username_from_message)
    else:
        addNewUserToDB(message)
        msg = "–†–∞–¥ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, " + str(username_from_message) + \
              "\n–Ø - <b>{0.first_name}</b>, –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ–º–æ—á—å —Ä–∞–∑–≤–∏—Ç—å –í–∞—à –Ω–∞–≤—ã–∫ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ " \
              "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç —Å –∫–≤–∞–¥—Ä–∞—Ç–∏–∫–∞–º–∏) –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è. " \

    bot.send_message(message.chat.id, msg.format(bot.get_me()), parse_mode='html')
    mainMenuInit(message)


def mainMenuInit(message):
    global userDataDB
    # keyboard
    main_screen_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)

    # item1 = types.KeyboardButton("üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ")
    item2 = types.KeyboardButton("üòä –ö–∞–∫ –¥–µ–ª–∞?")
    videoListening = types.KeyboardButton("–û —á–µ–º –æ–Ω–∏ –≥–æ–≤–æ—Ä—è—Ç? ü§î")
    # main_screen_markup.row("üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ", "üòä –ö–∞–∫ –¥–µ–ª–∞?")
    main_screen_markup.add( "–û —á–µ–º –æ–Ω–∏ –≥–æ–≤–æ—Ä—è—Ç? ü§î",
                           "–°–æ—Å—Ç–∞–≤—å ______ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º",
                            "‚ùì –ü–æ–º–æ—â—å")

    isAdmin = userDataDB.get("role")
    if isAdmin == "admin":
        main_screen_markup.add("üìΩ –î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –∑–∞–¥–∞–Ω–∏–µ", "üìù –î–æ–±–∞–≤–∏—Ç—å —Ñ—Ä–∞–∑—É –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è")

    bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è", parse_mode='html', reply_markup=main_screen_markup)


@bot.message_handler(content_types=['video'])
def addNewVideoTask(message):
    global userDataDB, newVideoTaskFlag
    isAdmin = userDataDB.get("role")
    if isAdmin == "admin" and newVideoTaskFlag == True:
        newVideoTaskMass = message.caption.split("\n")
        newVideoTaskAccent = newVideoTaskMass[0]
        newVideoTaskAnswers = []
        for i in range(1, 5):
            newVideoTaskAnswers.append(newVideoTaskMass[i])
        newVideoTaskRightAnswer = newVideoTaskMass[1]
        newVideoTaskFileId = message.video.file_id
        videoCountsByCountry = videoCollection.count_documents(filter={"country_accent": str(newVideoTaskAccent)})
        newVideoTaskId = videoCountsByCountry + 1

        videoCollection.insert_one(
            {
                "id": str(newVideoTaskId),
                "country_accent": newVideoTaskAccent,
                "file_id": newVideoTaskFileId,
                "answers": newVideoTaskAnswers,
                "right_answer": newVideoTaskRightAnswer,
            }
        )
        newVideoTask = videoCollection.find_one({"id": str(newVideoTaskId)})
        print(newVideoTask)
    else:
        bot.send_message(message.chat.id, "–£ –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")


# @bot.message_handler(content_types=['text'])
def addNewPhraseTask(message):
    global userDataDB, newPhraseTaskFlag
    isAdmin = userDataDB.get("role")
    print("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ñ—Ä–∞–∑—É")
    if isAdmin == "admin" and newPhraseTaskFlag == True:
        newPhraseTaskMass = message.text.split("\n")
        newPhraseTaskQuestion = newPhraseTaskMass[0]
        print(newPhraseTaskQuestion)
        newPhraseTaskAnswer = newPhraseTaskMass[1]
        print(newPhraseTaskAnswer)
        phraseCounts = phraseCollection.estimated_document_count()
        newPhraseTaskId = phraseCounts + 1
        print(newPhraseTaskId)

        phraseCollection.insert_one(
            {
                "id": str(newPhraseTaskId),
                "question_sentence": newPhraseTaskQuestion,
                "answer_sentence": newPhraseTaskAnswer
            }
        )
        newPhraseTask = phraseCollection.find_one({"id": str(newPhraseTaskId)})
        print(newPhraseTask)
    else:
        bot.send_message(message.chat.id, "–£ –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")


@bot.message_handler(content_types=['text'])
def mainScreenResponse(message):
    print(message)
    print(str(message.from_user.first_name) + " " + str(message.from_user.last_name) + ": " + str(message.text))
    global videoRightAnswer, newVideoTaskFlag
    global userCountryAccent
    global phraseBlankMessage, userPhraseItemChoice, makePhraseInlineMarkup, newPhraseTaskFlag
    if message.chat.type == 'private':
        if message.text == 'üé≤ –†–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ':
            bot.send_message(message.chat.id, str(random.randint(0, 100)))

        elif message.text == "üìΩ –î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –∑–∞–¥–∞–Ω–∏–µ":
            newVideoTaskMarkup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
            newVideoTaskMarkup.row("üìΩ –ù–æ–≤—ã–µ –≤–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
            newVideoTaskFlag = True
            bot.send_message(message.chat.id, "–ü—Ä–∞–≤–∏–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ –∑–∞–¥–∞–Ω–∏–π:\n"
                                              "1 —Å—Ç—Ä–æ–∫–∞ - –∞–∫—Ü–µ–Ω—Ç <b>Britain</b> –∏–ª–∏ <b>American</b>\n"
                                              "2, 3, 4, 5 —Å—Ç—Ä–æ–∫–∏ - –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –∫ –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–º—É –≤–∏–¥–µ–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º\n"
                                              "–í–∞–∂–Ω–æ - –≤–∞—Ä–∏–∞–Ω—Ç –≤–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–µ—Ä–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º",
                             reply_markup=newVideoTaskMarkup, parse_mode="html")

        elif message.text == "üìΩ –ù–æ–≤—ã–µ –≤–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã":
            newVideoTaskFlag = False
            mainMenuInit(message)

        elif message.text == "üìù –î–æ–±–∞–≤–∏—Ç—å —Ñ—Ä–∞–∑—É –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è":
            newPhraseTaskMarkup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
            newPhraseTaskMarkup.row("üìù –ù–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã")
            newPhraseTaskFlag = True
            bot.send_message(message.chat.id, "–ü—Ä–∞–≤–∏–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ—Ä–∞–∑ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è:\n"
                                              "1 —Å—Ç—Ä–æ–∫–∞ - –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º\n"
                                              "2 —Å—Ç—Ä–æ–∫–∞ - –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –≤–∞—Ä–∏–∞–Ω—Ç –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n"
                                              "–í–∞–∂–Ω–æ - –≤–∞—Ä–∏–∞–Ω—Ç –≤–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–µ—Ä–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º",
                             reply_markup=newPhraseTaskMarkup, parse_mode="html")

        elif message.text == "üìù –ù–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã":
            newPhraseTaskFlag = False
            mainMenuInit(message)

        elif message.text == 'üòä –ö–∞–∫ –¥–µ–ª–∞?':
            inline_markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("–•–æ—Ä–æ—à–æ", callback_data='good')
            item2 = types.InlineKeyboardButton("–ù–µ –æ—á–µ–Ω—å", callback_data='bad')
            inline_markup.add(item1, item2)
            bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, —Å–∞–º –∫–∞–∫?', reply_markup=inline_markup)

        elif message.text == "‚ùì –ü–æ–º–æ—â—å":
            helpMarkup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
            helpMarkup.row("–ù–∞ –≥–ª–∞–≤–Ω—É—é üè†")
            bot.send_message(message.chat.id, "–ö–∞–∫ –í—ã –Ω–∞–≤–µ—Ä–Ω–æ–µ –ø–æ–º–Ω–∏—Ç–µ, —è - English Trainspoting, –±–æ—Ç, –ø–æ–º–æ–≥–∞—é—â–∏–π "
                                              "–≤ —Ä–∞–∑–≤–∏—Ç–∏–∏ –Ω–∞–≤—ã–∫–æ–≤ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.\n"
                                              "–í–æ—Ç –∫—Ä–∞—Ç–∫–æ–µ –ø–æ—è—Å–Ω–µ–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ —è —É–º–µ—é:\n"
                                              "<b>–û —á–µ–º –æ–Ω–∏ –≥–æ–≤–æ—Ä—è—Ç?</b> - –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –∞—É–¥–∏–∞–ª—å–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è."
                                              " –ü–æ—Å–ª—É—à–∞–π—Ç–µ –æ —á–µ–º –≥–æ–≤–æ—Ä—è—Ç –≥–µ—Ä–æ–∏ –≤–∏–¥–µ–æ, –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç.\n"
                                              "<b>–°–æ—Å—Ç–∞–≤—å ______ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º</b> - —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –í–∞–º –Ω–∞—É—á–∏—Ç—å—Å—è "
                                              "—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –í–∑–≥–ª—è–Ω–∏—Ç–µ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ "
                                              "—Å–æ—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ –∏–∑ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤.\n"
                                              "–ï—Å–ª–∏ –í–∞–º –≤–¥—Ä—É–≥ –≤—Å—Ç—Ä–µ—Ç–∏–ª–æ—Å—å –Ω–µ–∑–Ω–∞–∫–æ–º–æ–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ "
                                              "—É–∑–Ω–∞—Ç—å –∫–∞–∫ —Ä—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ –ø–∏—à–µ—Ç—Å—è –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏ - –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –≤ "
                                              "—á–∞—Ç –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –í–∞–º –æ—Ç–≤–µ—Ç–∏—Ç—å.\n\n\n"
                                              "–Ø –ø–æ—á–µ–º—É —Ç–æ –¥–æ–ª–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è? –ù–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç –∫–æ–º–∞–Ω–¥—É"
                                              " '<b>/start</b>'. –í–æ–∑–º–æ–∂–Ω–æ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫\n"
                                              "–í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –í—ã —É–≤–µ—Ä–µ–Ω—ã ,—á—Ç–æ –Ω–∞—à–ª–∏ –æ—à–∏–±–∫—É –∏–ª–∏ –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ "
                                              "- –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –Ω–∞ –ø–æ—á—Ç—É flikson@gmail.com\n"
                                              "–ó–∞—Ä–∞–Ω–µ–µ –í–∞–º —Å–ø–∞—Å–∏–±–æ –∏ —É–¥–∞—á–∏ –≤ –í–∞—à–∏—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏—è—Ö ‚ù§Ô∏è",
                             reply_markup=helpMarkup, parse_mode="html")

        elif message.text == "–ù–∞ –≥–ª–∞–≤–Ω—É—é üè†":
            mainMenuInit(message)

        elif message.text == "–°–æ—Å—Ç–∞–≤—å ______ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º" or message.text == "–ï—â–µ —Ñ—Ä–∞–∑! üìù":
            makePhrase(message)

        elif message.text == "–û —á–µ–º –æ–Ω–∏ –≥–æ–≤–æ—Ä—è—Ç? ü§î":
            countryAccentMarkup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
            countryAccentMarkup.row("–ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–π üá¨üáß", "–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π üá∫üá∏", "–ù–∞ –≥–ª–∞–≤–Ω—É—é üè†")
            bot.send_message(message.chat.id, "–° –∫–∞–∫–∏–º –∞–∫—Ü–µ–Ω—Ç–æ–º –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥—Ä—É–∂–∏—Ç—å—Å—è?",
                             reply_markup=countryAccentMarkup)
            videoRightAnswer = ""

        elif (message.text == "–ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–π üá¨üáß") or (message.text == "–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π üá∫üá∏") or (
                message.text == "–ï—â–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤! ü§ê"):

            if message.text == "–ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–π üá¨üáß":
                userCountryAccent = "British"
            elif message.text == "–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–π üá∫üá∏":
                userCountryAccent = "American"

            videoRightAnswer = videoListening(message, userCountryAccent)
            print("–æ —á–µ–º " + videoRightAnswer)

        elif ord(message.text[0]) in [10102, 10103, 10104, 10105]:
            print("–ø—Ä–æ–≤–µ—Ä–∫–∞ " + videoRightAnswer)

            if videoRightAnswer == message.text:
                bot.send_message(message.chat.id, "–ò —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!")
                userCurrentVideoIdInc(message, userCountryAccent)
            else:
                bot.send_message(message.chat.id, "–£–≤—ã, –Ω–µ—Ç. –ü–æ—Å–ª—É—à–∞–π –µ—â–µ —Ä–∞–∑.")

        else:
            if newPhraseTaskFlag == False:
                msg = getWordTranslation(message.text)
                bot.send_message(message.chat.id, msg)
            else:
                addNewPhraseTask(message)


def makePhrase(message):
    global phraseBlankMessage, makePhraseInlineMarkup, phraseEditedMessage, phraseAnswer

    phraseCounts = phraseCollection.estimated_document_count()
    print("Phrase counts " + str(phraseCounts))
    randomPhraseId = random.randint(1, phraseCounts)

    userCurrentMakePhraseId = usersCollection.find_one({"id": str(message.from_user.id)}).get("current_make_phrase_id")
    print("user current make phrase id: " + str(userCurrentMakePhraseId))

    if userCurrentMakePhraseId <= phraseCounts:
        phraseDataDB = phraseCollection.find_one({"id": str(userCurrentMakePhraseId)})
    else:
        phraseDataDB = phraseCollection.find_one({"id": str(randomPhraseId)})

    phraseQuestion = phraseDataDB.get("question_sentence")
    print(phraseQuestion)
    phraseAnswer = phraseDataDB.get("answer_sentence")
    print(phraseAnswer)
    answersMass = phraseAnswer.split()
    shuffle(answersMass)
    print(answersMass)

    makePhraseInlineMarkup = types.InlineKeyboardMarkup()
    phraseBlankMessage = ""
    callbackData = "phrase_word:"
    for elem in answersMass:
        userPhraseItemChoice = types.InlineKeyboardButton(elem, callback_data=callbackData + elem)
        makePhraseInlineMarkup.add(userPhraseItemChoice)
        phraseBlankMessage += "___ "

    makePhraseInlineMarkup.row(types.InlineKeyboardButton("‚úÖ", callback_data=callbackData + "‚úÖ"),
                               types.InlineKeyboardButton("‚ùå", callback_data=callbackData + "‚ùå"))
    phraseEditedMessage = phraseBlankMessage

    makePhraseMarkup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    makePhraseMarkup.add("–ï—â–µ —Ñ—Ä–∞–∑! üìù", "–ù–∞ –≥–ª–∞–≤–Ω—É—é üè†")

    bot.send_message(message.chat.id, phraseQuestion, reply_markup=makePhraseMarkup)
    bot.send_message(message.chat.id, phraseBlankMessage, reply_markup=makePhraseInlineMarkup)


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            if call.data == 'good':
                bot.send_message(call.message.chat.id, '–í–æ—Ç –∏ –æ—Ç–ª–∏—á–Ω–µ–Ω—å–∫–æ üòä')
            elif call.data == 'bad':
                bot.send_message(call.message.chat.id, '–ë—ã–≤–∞–µ—Ç üò¢')

            elif call.data[0:11] == "phrase_word":
                global phraseBlankMessage, phraseEditedMessage, makePhraseInlineMarkup, phraseAnswer
                userPhraseChoice = call.data[12:]
                if userPhraseChoice == "‚úÖ":
                    print("Confirm" + str(userPhraseChoice))
                    print(phraseEditedMessage)
                    print(phraseAnswer)
                    userPhraseChoice = ""
                    if str(phraseEditedMessage) == str(phraseAnswer):
                        msg = "–î–∞, –≤—ã –∞–±—Å–æ–ª—é—Ç–Ω–æ –ø—Ä–∞–≤—ã!"
                        userCurrentMakePhraseIdInc(call)
                    else:
                        msg = "–£–≤—ã, –Ω–æ –Ω–µ—Ç. –ü–æ–¥—É–º–∞–π—Ç–µ —Ö–æ—Ä–æ—à–µ–Ω—å–∫–æ"

                    bot.send_message(chat_id=call.message.chat.id,
                                     text=msg)

                elif userPhraseChoice == "‚ùå":
                    print("Clear")
                    phraseEditedMessage = phraseBlankMessage
                    bot.edit_message_text(chat_id=call.message.chat.id,
                                          message_id=call.message.message_id,
                                          text=phraseEditedMessage,
                                          reply_markup=makePhraseInlineMarkup)
                else:
                    print("userPhraseChoice: " + str(userPhraseChoice))
                    phraseEditedMessage = phraseEditedMessage.replace("___", userPhraseChoice, 1)
                    print(phraseEditedMessage)
                    # print(bot.chosen_inline_handlers)
                    bot.edit_message_text(chat_id=call.message.chat.id,
                                          message_id=call.message.message_id,
                                          text=phraseEditedMessage,
                                          reply_markup=makePhraseInlineMarkup)

                # show alert
                # bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
                #                           text="–≠–¢–û –¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï!!11")

    except Exception as e:
        print(repr(e))


def userCurrentVideoIdInc(message, userCountryAccent):
    userId = message.from_user.id
    if userCountryAccent == "British":
        usersCollection.update_one({"id": str(userId)}, {"$inc": {"current_britain_video_id": 1}})
        print("–í—Ä–æ–¥–µ –æ–±–Ω–æ–≤–∏–ª —Å—á–µ—Ç—á–∏–∫ –±—Ä–∏—Ç–∞–Ω—Å–∫–æ–≥–æ –≤–∏–¥–µ–æ")
    elif userCountryAccent == "American":
        usersCollection.update_one({"id": str(userId)}, {"$inc": {"current_american_video_id": 1}})
        print("–í—Ä–æ–¥–µ –æ–±–Ω–æ–≤–∏–ª —Å—á–µ—Ç—á–∏–∫ –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–æ–≥–æ –≤–∏–¥–µ–æ")


def userCurrentMakePhraseIdInc(message):
    userId = message.from_user.id
    print(userId)
    usersCollection.update_one({"id": str(userId)}, {"$inc": {"current_make_phrase_id": 1}})
    print("–í—Ä–æ–¥–µ –æ–±–Ω–æ–≤–∏–ª —Å—á–µ—Ç—á–∏–∫ —Ñ—Ä–∞–∑")


def videoListening(message, userCountryAccent):
    videoCountsByCountry = videoCollection.count_documents(filter={"country_accent": str(userCountryAccent)})

    if userCountryAccent == "British":
        userCurrentVideoId = usersCollection.find_one({"id": str(message.from_user.id)}).get("current_britain_video_id")
        print("user current british video id: " + str(userCurrentVideoId))
    else:
        userCurrentVideoId = usersCollection.find_one({"id": str(message.from_user.id)}).get(
            "current_american_video_id")
        print("user current american video id: " + str(userCurrentVideoId))

    print("Video counts " + str(videoCountsByCountry))
    randomVideoId = random.randint(1, videoCountsByCountry)

    print(userCountryAccent)

    if userCurrentVideoId <= videoCountsByCountry:
        videoDataDB = videoCollection.find_one(
            {"id": str(userCurrentVideoId), "country_accent": str(userCountryAccent)})
    else:
        videoDataDB = videoCollection.find_one({"id": str(randomVideoId), "country_accent": str(userCountryAccent)})

    videoFileId = videoDataDB.get("file_id")
    print(videoDataDB)
    videoAnswers = videoDataDB.get("answers")
    shuffle(videoAnswers)
    rightAnswer = videoDataDB.get("right_answer")
    # print(rightAnswer)
    # print(videoAnswers)
    videoListenMarkup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    # videoListenInlineMarkup = types.InlineKeyboardMarkup

    for i in range(0, 4):
        videoItem = types.KeyboardButton(chr(10102 + i) + " " + videoAnswers[i])
        if videoAnswers[i] == rightAnswer:
            rightAnswer = chr(10102 + i) + " " + rightAnswer
        videoListenMarkup.add(videoItem)

    video = types.Video(videoFileId, 1280, 720, duration=60)
    videoListenMarkup.add("–ï—â–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤! ü§ê", "–ù–∞ –≥–ª–∞–≤–Ω—É—é üè†")

    bot.send_video(message.chat.id, video.file_id, reply_markup=videoListenMarkup)

    userAnswer = bot.send_chat_action(message.chat.id, "typing")

    return rightAnswer


def getWordTranslation(key: str) -> str:
    headers_auth = {'Authorization': 'Basic ' + config.ABBYY_KEY}
    auth = requests.post(URL_AUTH, headers=headers_auth)
    if auth.status_code == 200:
        token = auth.text
        headers_translate = {
            'Authorization': 'Bearer ' + token
        }
        # for i in range(1040, 1105):
        #     print(str(i) + ": " + chr(i))
        if ord(key[0]) in range(65, 91) or ord(key[0]) in range(97, 123):
            params = {
                'text': key,
                'srcLang': 1033,
                'dstLang': 1049,
                'isCaseSensitive': True,
            }
        elif ord(key[0]) in range(1040, 1104):
            params = {
                'text': key,
                'srcLang': 1049,
                'dstLang': 1033,
                'isCaseSensitive': True,
            }
        else:
            errMsg = "–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ —è –∑–Ω–∞—é –ø–µ—Ä–µ–≤–æ–¥ —Ç–æ–ª—å–∫–æ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏ –æ–±—Ä–∞—Ç–Ω–æ"
            return errMsg
        req = requests.get(
            URL_TRANSLATE, headers=headers_translate, params=params)
        res = req.json()
        try:
            value = res['Translation']['Translation']
            return value
        except TypeError:
            if res == 'Incoming request rate exceeded for 50000 chars per day pricing tier':
                return res
            else:
                return None
    else:
        print('Error!' + str(auth.status_code))


if "HEROKU" in list(os.environ.keys()):
    # –î–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    @server.route('/' + config.TOKEN, methods=['POST'])
    def getMessage():
        bot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode("utf-8"))])
        return "!", 200


    @server.route("/")
    def webhook():
        bot.remove_webhook()
        bot.set_webhook(url='https://englishtrainspoting.herokuapp.com/' + config.TOKEN)
        return "!", 200


    if __name__ == "__main__":
        server.run(host="0.0.0.0", port=int(os.environ.get('PORT', 5000)), debug=True)
else:
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    bot.remove_webhook()
    bot.polling(none_stop=True)
